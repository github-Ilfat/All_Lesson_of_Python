'''
LIGHT:
1. Написал декоратор, замеряющий время выполнение декорируемой функции.
2. Сравнил время создания генератора и списка с элементами:
    натуральные числа от 1 до 1000000 (созданные объекты оформил в виде функций).
PRO
Light +
3. Написал декоратор, замеряющий объем оперативной памяти, потребляемый декорируемой функцией.
4. Сравнил объем оперативной памяти для функции создания генератора и функции создания списка с элементами:
    натуральные числа от 1 до 1000000.

Презентация вебинара:
https://drive.google.com/open?id=1O9tBDTRJ3NnSljk7RAPRBQCiB_YB8iMC
Репозиторий GitHub:
https://github.com/MachineLearningIsEasy/python_lesson_8
'''


from datetime import datetime
import psutil
import os

def timer(func):
    def wapper(*args, **kwargs):
        begin_time = datetime.now()
        #--------------------------------------
        result = func(*args, **kwargs)
        #--------------------------------------
        end_time = datetime.now()
        print(f'Время отработки функции {func.__name__}: {end_time-begin_time} (ЧЧ:ММ:СС.милисекунд)')
        return result
    return wapper

def memory_used(func):
    #--------------------------------------
    def wapper(*args, **kwargs):
        proc = psutil.Process(os.getpid())
        start_memory = proc.memory_info().rss
        #--------------------------------------
        result = func(*args, **kwargs)
        #--------------------------------------
        end_memory = proc.memory_info().rss
        print(f"Объём памяти используемой функцией {func.__name__}: {end_memory-start_memory} (в байтах)")
        return result
    #--------------------------------------
    return wapper



print('--------------------------------------------------------------------------------------------------------')
print('Эксперимент1:')
print('@timer')
print('@memory_used')
print('--------------------------------------------------------------------------------------------------------')
@timer
@memory_used
def gen_lst_nat(num):
    for i in range(num):
        yield i

@timer
@memory_used
def list_nat(num):
    result = []
    for i in range(num):
        result.append(i)
    return result

print(' Результат эксперимента №1:')
print('--------------------------------------------------------------------------------------------------------')
gen_lst_nat(10000000)
list_nat(10000000)
print('--------------------------------------------------------------------------------------------------------')


print('--------------------------------------------------------------------------------------------------------')
print('Эксперимент2:')
print('@memory_used')
print('@timer')
print('--------------------------------------------------------------------------------------------------------')
@memory_used
@timer
def gen_lst_nat(num):
    for i in range(num):
        yield i

@memory_used
@timer
def list_nat(num):
    result = []
    for i in range(num):
        result.append(i)
    return result

print(' Результат эксперимента №2:')
print('--------------------------------------------------------------------------------------------------------')
gen_lst_nat(10000000)
list_nat(10000000)
print('--------------------------------------------------------------------------------------------------------')

'''
------------------------------------------------------------------------------------------------------
Эксперимент1,
если вложенность декораций такая:
!!!!!!!!!!!!!!!
@timer
@memory_used
!!!!!!!!!!!!!!!
то результат по таймеру более ральный:
#Объём памяти используемой функцией gen_lst_nat: 0 (в байтах)
#                               Время отработки функции wapper: 0:00:00.001000 (ЧЧ:ММ:СС.милисекунд)
#Объём памяти используемой функцией list_nat: 405987328 (в байтах)
#                               Время отработки функции wapper: 0:00:02.331133 (ЧЧ:ММ:СС.милисекунд)
------------------------------------------------------------------------------------------------------
Эксперимент2,
если вложенность декораций такая:
!!!!!!!!!!!!!!!
@memory_used
@timer
!!!!!!!!!!!!!!!
то результат по определению памяти более реальный:
#Время отработки функции gen_lst_nat: 0:00:00 (ЧЧ:ММ:СС.милисекунд)
#                               Объём памяти используемой функцией wapper: 36864 (в байтах)
#Время отработки функции list_nat: 0:00:02.317133 (ЧЧ:ММ:СС.милисекунд)
#                               Объём памяти используемой функцией wapper: 405942272 (в байтах)
------------------------------------------------------------------------------------------------------
Результат
Таким образом, результирующий ответ будет таким (выбрано визульно из предыдущих результатов эксперимента):

#Время отработки функции wapper: 0:00:00.001000 (ЧЧ:ММ:СС.милисекунд)
#Объём памяти используемой функцией wapper: 36864 (в байтах)
#Время отработки функции wapper: 0:00:02.331133 (ЧЧ:ММ:СС.милисекунд)
#Объём памяти используемой функцией wapper: 405942272 (в байтах)
------------------------------------------------------------------------------------------------------
'''
